/**
 * FORM 객체 유효성및 이벤트처리 관련 스크립트
 * 
 * Object       : jquery-submit.js
 * Description  : FORM 객체 유효성및 이벤트처리 관련 스크립트 
 * Author       : LaheeDad
 * Since        : 2013.9.10.
 * Version      : 1.0
 * 
 * Modification Information
 *     since          author              description
 *  ===========    =============    ===========================
 *  2013.9.10.     LaheeDad         최초 생성
 */


/**
 * 문자열의 왼쪽에서 count 만큼의 문자열을 반환
 * @param   count
 * @returns string
 */
String.prototype.left = function(count){
    return this.substr(0, count);
};

/**
 * 문자열의 오른쪽에서 count 만큼의 문자열을 반환
 * @param   count
 * @returns string
 */
String.prototype.right = function(count){
    return this.substr(this.length-count, count);
};


/**
 * From 유효성 확인을 위한 객체
 */
var submitUtil = {
    /**
     * SUBMIT 비활성화
     * @use submitUtil.disabled();
     */
    disabled : function() {
        $('input[type=submit], a.submit').prop('disabled', true);
    },
    /**
     * SUBMIT 활성화
     * @use submitUtil.enable();
     */
    enable : function() {     
        $('input[type=submit], a.submit').prop('disabled', false);
    },
    /**
     * 앞뒤 공백을 제거한후에 다시 Obejct에 담아준다.
     * @use submitUtil.trim(Object)
     * @param object
     */
    trim : function(object){        
        $(object).val($.trim($(object).val()));   
    },
    /**
     * 입력값 입력유무 확인 
     * - minLength속성이 있으면 최소 문자수도 확인.
     * - text/textarea/file/select 만 가능
     * - select는 ''로 구분함.
     * @use submitUtil.isEmpty(Object, String)
     * @param object
     * @param formName 폼명(Alert Message 표시에 필요함.)     
     * @returns {Boolean}
     */
    isEmpty : function(object, formName) {
        var str = '';

        try{     
            
            switch(object.type){
                case 'text' :
                case 'password' :
                case 'file' :
                case 'hidden' :
                case 'textarea' :
                    this.trim(object);
                    str = $(object).val();
                    break;
                case 'select-one' :
                    str = $('select[name=' + $(object).attr('name') + '] option:selected').val();                    
                    break;
                default :
                    alert('text / textarea / select 만 가능합니다.');
                    return false;                
            }
                       
            if("" == str || null == str){
                if(typeof formName == 'undefined'){
                    formName = $(object).attr('id');
                }
                
                return this.alertNfocus(object, formName + '을(를) 입력해 주세요.');                
            }else{
                return this.isMinLength(object, formName);
            }
            
        }catch (e) {
            return this.alertNfocus(object, '[isEmpty]Script Error Message :: ' + e);
        }
    },   
    /**
     * 최소문자수 확인
     * @use  submitUtil.isMinLength(Object, String);
     * @param object
     * @param formName 폼명(Alert Message 표시에 필요함.)  
     * @returns
     */
    isMinLength : function(object, formName) {
        if($(object).attr('minlength') != null){
            if(!($(object).val().length >= $(object).attr('minlength'))){
                return this.alertNfocus(object, formName + '을(를) '+ $(object).attr('minlength') + '글자 이상 입력해주세요.');                        
            } 
        }                
        
        return true;
    },
    /**
     * 입력값이 NULL인지 체크
     * @use  submitUtil.isNull(Object); 
     * @param object
     * @returns true : null
     */
    isNull : function(object) {
        try{     
            var str = $(object).val();
            
            if("" == str || null == str || 'null' === str || str.toString().replace(/ /g,"") == ""){
                return true;
            }else{
                this.trim(object);
            }
            
            return false;
        }catch (e) {
            return false;
            //return this.alertNfocus(object, '[isNull]Script Error Message :: ' + e);
        }
    },    
    /**
     * ID 확인
     * -> 최소 5문자
     * @use  submitUtil.isID(Object); 
     * @param object
     * @returns {Boolean}
     */
    isID : function(object) {
        var pattern = /^[a-zA-Z][a-zA-Z0-9]{5,20}$/;
        
        try{
            this.trim(object);   
             
            if (!pattern.test($(object).val())) {
                return this.alertNfocus(object, '아이디를 입력해 주십시오.'); 
            }else {
                return true;
            }
        }catch (e) {
            return this.alertNfocus(object, '[isID]Script Error Message :: ' + e);
        }
    },
    /**
     * 비밀번호 체크 
     * 영문 대/소문자, 특수문자, 숫자를 조합하여 최소 8자리
     * @use  submitUtil.isPassword(Object); 
     * @param object
     * @returns {Boolean}
     */
    isPassword : function(object, formName) {
        var pattern = /^.*(?=.{8,20})(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[!@#$%^&*\(\)\-_+\=]).*$/gi;
        var pattern2 = /(?=.*[a-zA-Z]{3})(?=.*[0-9]{3})(?=.*[!@#$%^&*\(\)\-_+\=]{3})/;
        try{
            this.trim(object);
            
            var str = $(object).val();
           
            if(str == ''){
                return this.alertNfocus(object, formName+'를 입력해 주십시오.'); 
            }
            
            if(!pattern.test(str)){
                return this.alertNfocus(object, formName+'는 영문 대/소문자, 특수문자, 숫자를 조합하여 최소 8자리 이상 입력해 주십시오.'); 
            }else{
                /*
                var length = str.length;
                for(var i=3; i<length; i++){
                    if(str.charCodeAt(i-3) == str.charCodeAt(i) && str.charCodeAt(i-2) == str.charCodeAt(i) && str.charCodeAt(i-1) == str.charCodeAt(i)){
                        return this.alertNfocus(object, formName+'는 연속된 문자,숫자를 사용할수 없습니다.');
                    }
                }
                */
                if(!pattern2.test(str)){
                    return true;
                }else{
                    return this.alertNfocus(object, formName+'는 연속된 문자,숫자를 사용할수 없습니다.');
                }
            }
        }catch (e) {
            return this.alertNfocus(object, '[isPassword]Script Error Message :: ' + e);
        }
    },
    /**
     *  E-Mail 주소 확인
     * @use  submitUtil.isEmail(Object);
     * @param object
     * @returns {Boolean}
     */
    isEmail : function(object) {
        var pattern1 = /(@.*@)|(\.\.)|(@\.)|(\.@)|(^\.)/;
        var pattern2 = /^[a-zA-Z0-9\-\.\_]+\@[a-zA-Z0-9\-\.]+\.([a-zA-Z]{2,4})$/;
        
        try{
            this.trim(object);
            if(!pattern1.test($(object).val()) && !pattern2.test($(object).val())){
                return this.alertNfocus(object, '올바른 이메일 주소를 입력해 주십시오.'); 
            }else{
                return true;
            }            
        }catch (e) {
            return this.alertNfocus(object, '[isEmail]Script Error Message :: ' + e);
        }
    },
    /**
     * checkbox,radio checked 확인
     *
     * @use  submitUtil.isChecked(object);
     * @param object : 시작일 form.input객체
     * @param formName 폼명(Alert Message 표시에 필요함.)
     * @return true / false
     */
    isChecked : function(object, formName){
        var bRtn = true;

        try{
            if(!$('input[name="'+$(object).attr("name")+'"]').is(':checked')){
                return this.alertNfocus(object, formName + '를 선택해 주세요.');          
            }
        }catch (e) {
            return this.alertNfocus(object, '[isChecked]Script Error Message :: ' + e);
        }

        return bRtn;
    },
    /**
     * 입력 날짜 유효성 체크
     * - 입력 날짜가 유효한 날짜인지를 확인 한다.
     * @use  submitUtil.isDate(Object);
     * @param object : form.input객체
     * @return true / false
     */
    isDate : function(object){
        try{
            this.trim(object);
            
            var val = $(object).val();
            val = val.replace(/[\.]/g,'');

            var status = true;
            var flag = false;
            var year = parseInt(val.substring(0,4), 10);
            var month = parseInt(val.substring(4,6), 10);
            var day = parseInt(val.substring(6,8), 10);

            if(this == ''){
                return false;
            }

            if(year % 4 == 0){
                flag = true;
                if(year % 100 == 0){
                    flag = false;
                    if(year % 400 == 0){
                        flag = true;
                    }
                }
            }

            var dayArray = new Array(12);
            dayArray[0]  = 31;
            dayArray[1]  = (flag) ? 29 : 28;
            dayArray[2]  = 31;
            dayArray[3]  = 30;
            dayArray[4]  = 31;
            dayArray[5]  = 30;
            dayArray[6]  = 31;
            dayArray[7]  = 31;
            dayArray[8]  = 30;
            dayArray[9]  = 31;
            dayArray[10] = 30;
            dayArray[11] = 31;

            if (month < 1 || month > 12){
                status = false;
            }

            if (day < 1 || day > dayArray[month-1]){
                status = false;
            }

            if(!status){
                this.alertNfocus(object, '날짜가 잘못 입력되었습니다.\n다시 입력해주세요.'); 
            }

        }catch (e) {
            return this.alertNfocus(object, '[isDate]Script Error Message :: ' + e);
        }

        return status;
    },
    /**
     * 입력 날짜 유효성 체크
     * - 시작일과 만료일을 확인
     * - 시작일이 만료일보다 크면 flase
     *
     * @use  submitUtil.isDateCompare(Object, Object);
     * @param oStart : 시작일 form.input객체
     * @param oEnd : 만료일 form.input객체
     * @return true / false
     */
    isDateCompare : function(oStart, oEnd){
        var bRtn = true;

        try{
            this.trim(oStart);
            this.trim(oEnd);
            
            var valStart = $.trim($(oStart).val()).replace(/[\.]/g,'');
            var valEnd = $.trim($(oEnd).val()).replace(/[\.]/g,'');

           if(!(valStart <= valEnd)){
               //bRtn = this.alertNfocus(oStart, '시작일보다 종료일이 과거일 수 없습니다.\n다시 입력해주세요.');
               bRtn = this.alertNfocus(oStart, '선택한 기간이 올바르지 않습니다.\n다시 선택해 주십시오.'); 
           }

        }catch (e) {
            return this.alertNfocus(oEnd, '[isDateCompare]Script Error Message :: ' + e);
        }

        return bRtn;
    },
    /**
     * 이미지 첨부파일 확인
     * 
     * @use  submitUtil.isAttachFile(Object, {I,M,G,E});
     * @param object
     * @param fileType (I:이미지, M:동영상, G:게임, E:학습자료)
     * @returns {Boolean}
     */
    isAttachFile : function(object, fileType){
        var bRtn = true;        //확인결과
        
        //시작문자는 영문으로 하고 영문/숫자/-/_만 가능하다.
        //2자 이상이어야 한다.
        var pattern = /^[a-zA-Z0-9][a-zA-Z0-9\-\_]+\.([a-zA-Z0-9]{3,4})$/;

        try{
            //파일경로
            var attachFilePath = object.value.toLowerCase();
            
            //파일명
            var attachFileName = attachFilePath.substring(attachFilePath.lastIndexOf("\\")+1); 
            
            //파일 확장자   
            //var attachFileType = attachFileName.right(4);
            var attachFileType = attachFileName.substring(attachFileName.lastIndexOf(".")+1);
            
            /*
             * 한글파일 확인 
             */            
            if (!pattern.test(attachFileName)) {
                return this.alertNfocus(object, '영문 및 숫자로 된 파일명으로 업로드해 주십시오.'); 
            }
            
            /*
             * 확장자 확인
             */
            switch(fileType){
                case 'I' :  if(!(attachFileType == 'jpg' || attachFileType == 'gif' || attachFileType == 'png')){
                                bRtn = this.alertNfocus(object,'이미지 파일만 업로드 가능합니다.(JPG, GIF, PNG)');    
                            }                
                            break;
                case 'M' :  if(!(attachFileType == 'mp4')){
                                bRtn = this.alertNfocus(object,'영상 파일은 MP4 파일만 업로드 가능합니다.');
                            }
                            break;
                case 'G' :  if(!(attachFileType == 'swf')){
                                bRtn = this.alertNfocus(object,'게임 파일은 SWF 파일만 업로드 가능합니다.');
                            }
                            break;
                case 'E' :  if(!(attachFileType == 'pdf' || attachFileType == 'xls' || attachFileType == 'ppt'
                                    || attachFileType == 'pptx' || attachFileType == 'doc'|| attachFileType == 'docx'
                                    || attachFileType == 'hwp' || attachFileType == 'xlsx')){
                                bRtn = this.alertNfocus(object,'첨부파일은 PDF, PPT, PPTX, DOC, DOCX, HWP, XLS, XLSX 파일만 업로드 가능합니다.');
                            }
                            break;
                case 'Q' :  if(!(attachFileType == 'xls')){
                                bRtn = this.alertNfocus(object,'퀴즈대회 문제등록은 XLS 파일만 업로드 가능합니다.');
                            }
                            break;
            }        
        }catch (e) {
            return this.alertNfocus(object, '[isAttachFile]Script Error Message :: ' + e);
        }

        return bRtn;
    },    
    /**
     * 경고창 및 포커싱처리
     * @use submitUtil.alertNfocus(Object, String);
     * @param object
     * @param alertMsg  AlertMessage
     * @returns {Boolean}
     */
    alertNfocus : function(object, alertMsg) {        
        try{
            alert(alertMsg);
            object.select();
            object.focus();
        }catch(e){
            //ignore
        }
        return false;
    },
    /**
     * 문자열 바이트 체크
     * @use submitUtil.getByte(Object)
     * @param object
     * @returns {Number}
     */
    getByte : function(object) {    
        var str = $.trim($(object).val());
        var strByte = 0;
        
        for (var i = 0; i < str.length; i++) {
            var ch = str.charAt(i);
            if (escape(ch).length > 4) {
                strByte += 2;
            } else if (ch != '\r') {
                strByte++;
            }
        }

        return strByte;
    }    
};


/**
 * 첨부 파일 관리 
 */
var fileUtil = {
    /**
     * 첨부파일 삭제
     * @use fileUtil.submitDeleteAttachFileInfo($(Object))
     * @param object
     */
    submitDeleteAttachFileInfo : function(object){
        /*
         * 파일정보 영역
         */
        var boxFile = $(object).parents('.uploaded_file');
        
        /*
         * 파일 첨부선택 영역
         */
        var boxAttach = $(object).parents('td').find('.box-attach');        
        
        var data = { attcFilSn : $(boxFile).find('input[type=hidden]').val()};
        
        ajaxUtil.postDisableAsync('/cm/cm500Del.kids', data, fileUtil.resultDeleteAttachFileInfo);
    },
    /**
     * 첨부파일 삭제 결과
     * @use fileUtil.resultDeleteAttachFileInfo({JSON})
     * @param json
     */
    resultDeleteAttachFileInfo : function(json){
        if(json.bindingStatus == undefined && json.result.status){
            var object = $('input[type=hidden][name*="attc"][value='+json.result.attcFilSn+']').parents('td');
            
            //파일정보 영역 삭제
            //$(object).find('.uploaded_file').remove();
            $(object).find('.uploaded_file input').val('').prop('disabled', true);
            $(object).find('.uploaded_file').hide();
            
            if($(object).find('.altExplArea').length > 0){
                $(object).find('.altExplArea input').val('');                
            }
            
            //파일 첨부선택 영역 노출
            $(object).find('.box-attach').show();
            
            //모달에서 첨부 파일 삭제시 모달 높이 조절해 주기
            if($(object).parents('div.modal_box').length > 0){
                $('.modal_box').css({'height': $('.modal_box').height() + 15});
            }

        }else{
            ajaxUtil.error(json);   
        }
    }
};

/**
 * 이벤트 / 안전&환경 게시판의 댓글 관리
 */
var replyUseYnSubmitObj = {       
    /**
     * Submit
     * @param form
     * @returns {Boolean}
     */
    submit : function(form){
        var confirmMsg = '';
        
        if(confirm('댓글을 설정을 변경 하시겠습니까?')){
            ajaxUtil.postDisableAsync($(form).attr('action'), $(form).serialize(), replyUseYnSubmitObj.result);
        }
        
        return false;
    },
    /**
     * Callback 
     * @param json
     */
    result : function(json){
        if(json.bindingStatus == undefined && json.result.status){
           alert('댓글 설정이 변경 되었습니다.');
        }else{
            ajaxUtil.error(json);   
        }
    }
};